# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

# COMPILATION OUTPUTS
# TypeScript compiles down to JavaScript, and by default, the compiled JavaScript files have the .js extension and source maps have the .js.map extension. If you're compiling TypeScript to a dedicated output directory (e.g., dist or build), you might want to exclude the entire directory. If not, you might want to exclude the individual files.

# If using a dedicated output directory:
dist/
build/

# If not using a dedicated output directory:
*.js
*.js.map

#NODE MODULES
# If you're using npm or Yarn to manage your project's dependencies, you'll have a node_modules/ directory. This should always be excluded as it can contain thousands of files, and you donâ€™t want those in your repo.
node_modules/

# IDE AND EDITOR CONFIGURATIONS
# Many IDEs and editors create configuration and cache files that are specific to a user's environment. Examples include .vscode/ for Visual Studio Code and .idea/ for JetBrains IDEs.
.vscode/
.idea/

# ENVIRONMENT CONFIGURATION
#Files that contain secrets, API keys, or database connection info (commonly .env files or other configuration files) should never be committed to a public repository.
.env
.env.local
.env.*.local

# TYPESCRIPT CACHE
# TypeScript might generate cache files when using project references or when incremental compilation is enabled.
*.tsbuildinfo

# OTHER COMMON EXCLUSIONS
#Other files and directories that are commonly excluded in many JavaScript and TypeScript projects include:

# Log files
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (<https://gruntjs.com/creating-plugins#storing-task-files>)
.grunt

# Bower dependency directory (<https://bower.io/>)
bower_components

# Dependency directory
# Commenting this out is preferred by some developers, npm can
# handle it properly when it's symlinked (npm v3+)
# node_modules/

# TSD Debug info
tsd-debug.log
